AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudBD File System (CFS) - Version 0.9 (Beta)'

Parameters:
  ###########################################################################
  ## CloudBD Credentials
  CloudBDCredentialsParamName:
    Description: SSM Parameter Name that contains your CloudBD credentials.
    Type: String
    Default: '/cloudbd/credentials.json'

  CloudBDCredentialsCustomKeyId:
    Description: Customer managed KMS Key ID (not the alias) used to encrypt
                 your CloudBD credentials SSM parameter. Leave this parameter
                 empty if using the default SSM key ('alias/aws/ssm').
    Type: String
    Default: ''

  ###########################################################################
  ## VPC and Networking Parameters
  Vpc:
    Description: VPC to deploy CFS into
    Type: AWS::EC2::VPC::Id

  AvailabilityZone:
    Description: Availability zone for the CFS cluster
    Type: AWS::EC2::AvailabilityZone::Name

  SubnetCidr:
    Description: CFS subnet IP CIDR range of form x.x.x.x/n.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  ############################################################################
  ## CFS Settings Parameters
  ClusterName:
    Description: Name of the CFS cluster (must be unique within the VPC)
    Type: String
    Default: cluster
    AllowedPattern: '[a-zA-Z0-9]{1,24}'
    ConstraintDescription: must be between 1 and 24 characters and in the set [A-Za-z0-9]

  VolumeName:
    Description: Name of the CFS volume (must be unique within the cluster)
    Type: String
    Default: 'cv0'
    AllowedPattern: '[a-zA-Z0-9]{1,24}'
    ConstraintDescription: must be between 1 and 24 characters and in the set [A-Za-z0-9]

  NumNodes:
    Description: Number of CFS nodes
    Type: Number
    Default: 3
    AllowedValues: [3,6,9,12]
    ConstraintDescription: must be a multiple of 3 between 3 and 12

  InstanceType:
    Description: Instance type for the CFS cluster nodes
    Type: String
    Default: 'c5n.2xlarge'
    AllowedValues: ['c5n.2xlarge', 'c5n.xlarge', 'c5.xlarge', 'm5.large', 't3.large']
    ConstraintDescription: must be a supported instance type

  PlacementStrategy:
    Description: Placement group strategy for the CFS cluster nodes. 'cluster' provides lower latency between nodes and 'spread' provides more resilience to simulataneous node failures.
    Type: String
    AllowedValues: ['none', 'cluster', 'spread']
    Default: 'none'

  ############################################################################
  ## CloudBD S3 Remote Parameters
  CloudBDServerSideEncryption:
    Description: Use server-side encryption with SSE-S3 (AES256).
    Type: String
    AllowedValues: [ 'yes', 'no' ]
    Default: 'no'

  CloudBDHttpProtocol:
    Description: Select the HTTP protocol to use when communicating with the
                 remote. HTTPS encrypts all network traffic but will have
                 higher CPU usage.
    Type: String
    AllowedValues: [ http, https ]
    Default: http

  ############################################################################
  ## Node Administration Parameters
  KeyPair:
    Description: EC2 KeyPair for SSH access to the CFS nodes (requires CFSAdminSecurityGroup).
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 Key Pair

  SsmSessionSupport:
    Description: Enable support for SSM session access to the CFS nodes.
    Type: String
    AllowedValues: ['yes', 'no']
    Default: 'yes'
    ConstraintDescription: must be 'yes' or 'no'

  CloudWatchSupport:
    Description: Enable support for recording node metrics and logs to CloudWatch.
    Type: String
    AllowedValues: ['yes', 'no']
    Default: 'yes'
    ConstraintDescription: must be 'yes' or 'no'

Mappings:
  CFSNodeAmis:
    us-east-2:
      HVM64: ami-01663872a07cfa87f

Conditions:
  CloudBDUseEncryption: !Equals ['yes', !Ref CloudBDServerSideEncryption]
  CloudBDUsePathBasedParameter: !Equals [!Select [0, !Split ['/', !Ref CloudBDCredentialsParamName]], '']
  CloudBDUseCustomKey: !Not [!Equals [!Ref CloudBDCredentialsCustomKeyId, '']]
  UsePlacementGroup: !Not [!Equals ['none', !Ref PlacementStrategy]]
  SsmSessionEnabled: !Equals ['yes', !Ref SsmSessionSupport]
  CloudWatchEnabled: !Equals ['yes', !Ref CloudWatchSupport]
  Use6Nodes: !Not [!Equals [!Ref NumNodes, '3']]
  Use9Nodes: !And [!Condition Use6Nodes, !Not [!Equals [!Ref NumNodes, '6']]]
  Use12Nodes: !And [!Condition Use9Nodes, !Not [!Equals [!Ref NumNodes, '9']]]
  UseCache: !Equals ['0', '1'] # always false, bcache can have stability issues in detached cache state, future feature

Resources:
  ##############################################################################
  # Security Groups
  CFSClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows attaching CFS volumes
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Client Security Group (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSAdminSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows SSH access to CFS nodes
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Admin Security Group (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: CFS internal use only (for CFS nodes)
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node Security Group (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 24007
          ToPort: 24008
          SourceSecurityGroupId: !GetAtt CFSClientSecurityGroup.GroupId
          Description: Allow GlusterFS traffic from CFS clients
        - IpProtocol: tcp
          FromPort: 49152
          ToPort: 49154
          SourceSecurityGroupId: !GetAtt CFSClientSecurityGroup.GroupId
          Description: Allow GlusterFS brick traffic from CFS clients
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          SourceSecurityGroupId: !GetAtt CFSClientSecurityGroup.GroupId
          Description: Allow ping traffic from CFS clients
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !GetAtt CFSAdminSecurityGroup.GroupId
          Description: Allow SSH traffic from CFS admins
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          SourceSecurityGroupId: !GetAtt CFSAdminSecurityGroup.GroupId
          Description: Allow ping traffic from CFS admins

  CFSNodeGlusterFSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 24007
      ToPort: 24007
      SourceSecurityGroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      Description: Allow GlusterFS traffic between CFS nodes

  CFSNodeGlusterFSBrickSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 49152
      ToPort: 49154
      SourceSecurityGroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      Description: Allow GlusterFS brick traffic between CFS nodes

  CFSNodeGlusterFSHASecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 4379
      ToPort: 4379
      SourceSecurityGroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      Description: Allow GlusterFS brick traffic between CFS nodes

  CFSNodeSshSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      Description: Allow SSH traffic between CFS nodes

  CFSNodePingSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      IpProtocol: icmp
      FromPort: 8
      ToPort: -1
      SourceSecurityGroupId: !GetAtt CFSNodeSecurityGroup.GroupId
      Description: Allow ping traffic between CFS nodes

  CFSEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow CFS nodes to use VPC endpoints
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Endpoint Security Group (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt CFSNodeSecurityGroup.GroupId

  ##############################################################################
  # Networking - Subnets and ENIs
  CFSPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Private Subnet (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSPrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  CFSPrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref CFSPrivateSubnet
      RouteTableId: !Ref CFSPrivateSubnetRouteTable

  CFSNode0Eni:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: 'Static IP for CFS Node 0'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 0 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode1Eni:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: 'Static IP for CFS Node 1'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 1 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode2Eni:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: 'Static IP for CFS Node 2'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 2 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode3Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use6Nodes
    Properties:
      Description: 'Static IP for CFS Node 3'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 3 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode4Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use6Nodes
    Properties:
      Description: 'Static IP for CFS Node 4'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 4 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode5Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use6Nodes
    Properties:
      Description: 'Static IP for CFS Node 5'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 5 ENI - (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode6Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use9Nodes
    Properties:
      Description: 'Static IP for CFS Node 6'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 6 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode7Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use9Nodes
    Properties:
      Description: 'Static IP for CFS Node 7'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 7 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode8Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use9Nodes
    Properties:
      Description: 'Static IP for CFS Node 8'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 8 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode9Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use12Nodes
    Properties:
      Description: 'Static IP for CFS Node 9'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 9 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode10Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use12Nodes
    Properties:
      Description: 'Static IP for CFS Node 10'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 10 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CFSNode11Eni:
    Type: AWS::EC2::NetworkInterface
    Condition: Use12Nodes
    Properties:
      Description: 'Static IP for CFS Node 11'
      GroupSet: [!Ref CFSNodeSecurityGroup]
      SubnetId: !Ref CFSPrivateSubnet
      SecondaryPrivateIpAddressCount: 1
      Tags:
        - Key: 'Name'
          Value: !Sub 'CFS Node 11 ENI (${ClusterName})'
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  ##############################################################################
  # Networking - VPC Endpoints
  CFSS3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Vpc
      RouteTableIds:
        - !Ref CFSPrivateSubnetRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'

  CFSEc2Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2'
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc
      SubnetIds: [ !Ref CFSPrivateSubnet ]
      SecurityGroupIds: [!Ref CFSEndpointSecurityGroup]

  CFSCloudFormationEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.cloudformation'
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc
      SubnetIds: [ !Ref CFSPrivateSubnet ]
      SecurityGroupIds: [!Ref CFSEndpointSecurityGroup]

  CFSApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.execute-api'
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc
      SubnetIds: [ !Ref CFSPrivateSubnet ]
      SecurityGroupIds: [!Ref CFSEndpointSecurityGroup]
      
  CFSSsmEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc
      SubnetIds: [ !Ref CFSPrivateSubnet ]
      SecurityGroupIds: [!Ref CFSEndpointSecurityGroup]

  CFSSsmMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: SsmSessionEnabled
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc
      SubnetIds: [ !Ref CFSPrivateSubnet ]
      SecurityGroupIds: [!Ref CFSEndpointSecurityGroup]

  CFSLoggingEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CloudWatchEnabled
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.logs'
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc
      SubnetIds: [ !Ref CFSPrivateSubnet ]
      SecurityGroupIds: [!Ref CFSEndpointSecurityGroup]

  CFSMonitoringEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Condition: CloudWatchEnabled
    Properties:
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.monitoring'
      VpcEndpointType: Interface
      PrivateDnsEnabled: false
      VpcId: !Ref Vpc
      SubnetIds: [ !Ref CFSPrivateSubnet ]
      SecurityGroupIds: [!Ref CFSEndpointSecurityGroup]

  ##############################################################################
  # Networking - Route53 DNS
  CFSHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Sub 'Hosted zone for ${ClusterName}.cfs.cloudbd.io'
      Name: !Sub '${ClusterName}.cfs.cloudbd.io'
      VPCs: [{VPCId: !Ref Vpc, VPCRegion: !Ref 'AWS::Region'}]

  CFSRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      Comment: "DNS entries for CFS nodes"
      HostedZoneId: !Ref CFSHostedZone
      RecordSets:
        - Name: !Sub '${ClusterName}.cfs.cloudbd.io'
          ResourceRecords:
            - !GetAtt CFSNode0Eni.PrimaryPrivateIpAddress
            - !GetAtt CFSNode1Eni.PrimaryPrivateIpAddress
            - !GetAtt CFSNode2Eni.PrimaryPrivateIpAddress
            - !If [Use6Nodes, !GetAtt CFSNode3Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            - !If [Use6Nodes, !GetAtt CFSNode4Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            - !If [Use6Nodes, !GetAtt CFSNode5Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            - !If [Use9Nodes, !GetAtt CFSNode6Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            - !If [Use9Nodes, !GetAtt CFSNode7Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            - !If [Use9Nodes, !GetAtt CFSNode8Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            - !If [Use12Nodes, !GetAtt CFSNode9Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            - !If [Use12Nodes, !GetAtt CFSNode10Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            - !If [Use12Nodes, !GetAtt CFSNode11Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
          Type: A
          TTL: 60
        - Name: !Sub 'vip.${ClusterName}.cfs.cloudbd.io'
          ResourceRecords:
            - !Select [0, !GetAtt CFSNode0Eni.SecondaryPrivateIpAddresses]
            - !Select [0, !GetAtt CFSNode1Eni.SecondaryPrivateIpAddresses]
            - !Select [0, !GetAtt CFSNode2Eni.SecondaryPrivateIpAddresses]
            - !If [Use6Nodes, !Select [0, !GetAtt CFSNode3Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
            - !If [Use6Nodes, !Select [0, !GetAtt CFSNode4Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
            - !If [Use6Nodes, !Select [0, !GetAtt CFSNode5Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
            - !If [Use9Nodes, !Select [0, !GetAtt CFSNode6Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
            - !If [Use9Nodes, !Select [0, !GetAtt CFSNode7Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
            - !If [Use9Nodes, !Select [0, !GetAtt CFSNode8Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
            - !If [Use12Nodes, !Select [0, !GetAtt CFSNode9Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
            - !If [Use12Nodes, !Select [0, !GetAtt CFSNode10Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
            - !If [Use12Nodes, !Select [0, !GetAtt CFSNode11Eni.SecondaryPrivateIpAddress], !Ref 'AWS::NoValue']
          Type: A
          TTL: 60
        - Name: !Sub 'node0.${ClusterName}.cfs.cloudbd.io'
          ResourceRecords: [!GetAtt CFSNode0Eni.PrimaryPrivateIpAddress]
          Type: A
          TTL: 60
        - Name: !Sub 'node1.${ClusterName}.cfs.cloudbd.io'
          ResourceRecords: [!GetAtt CFSNode1Eni.PrimaryPrivateIpAddress]
          Type: A
          TTL: 60
        - Name: !Sub 'node2.${ClusterName}.cfs.cloudbd.io'
          ResourceRecords: [!GetAtt CFSNode2Eni.PrimaryPrivateIpAddress]
          Type: A
          TTL: 60
        - !If
            - Use6Nodes
            - Name: !Sub 'node3.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode3Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'
        - !If
            - Use6Nodes
            - Name: !Sub 'node4.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode4Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'
        - !If
            - Use6Nodes
            - Name: !Sub 'node5.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode5Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'
        - !If
            - Use9Nodes
            - Name: !Sub 'node6.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode6Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'
        - !If
            - Use9Nodes
            - Name: !Sub 'node7.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode7Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'
        - !If
            - Use9Nodes
            - Name: !Sub 'node8.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode8Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'
        - !If
            - Use12Nodes
            - Name: !Sub 'node9.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode9Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'
        - !If
            - Use12Nodes
            - Name: !Sub 'node10.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode10Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'
        - !If
            - Use12Nodes
            - Name: !Sub 'node11.${ClusterName}.cfs.cloudbd.io'
              ResourceRecords: [!GetAtt CFSNode11Eni.PrimaryPrivateIpAddress]
              Type: A
              TTL: 60
            - !Ref 'AWS::NoValue'

  ##############################################################################
  # CloudBD S3 Remote - For high-performance storage of CFS data to S3
  CloudBDS3RemoteBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        !If
          - CloudBDUseEncryption
          - ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault: { SSEAlgorithm: 'AES256' }
          - !Ref 'AWS::NoValue'
      Tags:
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  CloudBDS3RemotePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Grants access to the CloudBD S3 remote bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 'ssm:GetParameter'
            Resource: !If
              - CloudBDUsePathBasedParameter
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${CloudBDCredentialsParamName}'
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CloudBDCredentialsParamName}'
          - !If # Allow decrypt of the CloudBD credentials.json parameter if using a custom key
              - CloudBDUseCustomKey
              - Effect: Allow
                Action: 'kms:Decrypt'
                Resource: !Sub 'arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${CloudBDCredentialsCustomKeyId}'
              - !Ref 'AWS::NoValue'
          - Effect: Allow
            Action: 's3:ListBucket'
            Resource: !GetAtt CloudBDS3RemoteBucket.Arn
          - Effect: Allow
            Action: 's3:HeadBucket'
            Resource: '*'
          - Effect: Allow
            Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
            Resource: !Sub '${CloudBDS3RemoteBucket.Arn}/cloudbd/*'

  CloudBDDiskLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: 'lambda.amazonaws.com' }
            Action: 'sts:AssumeRole'
      ManagedPolicyArns: [ !Ref CloudBDS3RemotePolicy ]

  CloudBDDiskLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: 'cloudbd-disk.handler'
      Role: !GetAtt CloudBDDiskLambdaRole.Arn
      Runtime: 'python3.8'
      Environment:
        Variables:
          CLOUDBD_REMOTE_BUCKET: !Ref CloudBDS3RemoteBucket
          CLOUDBD_CREDS_SSM_REGION: !Ref 'AWS::Region'
          CLOUDBD_CREDS_SSM_PARAM: !Ref CloudBDCredentialsParamName
      Code:
        S3Bucket: !Sub '${AWS::Region}.cloudbd.io'
        S3Key: 'cfn-templates/cloudbd-disk-3.0.3-1.zip'
      Timeout: 900
      MemorySize: 512
      Tags:
        - Key: 'CFSClusterName'
          Value: !Ref ClusterName

  ##############################################################################
  # CFS Node Resources
  CFSNode0CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk0'
      Size: '134217856M' # 128T + 128M

  CFSNode1CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk1'
      Size: '134217856M' # 128T + 128M

  CFSNode2CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk2'
      Size: '134217856M' # 128T + 128M

  CFSNode3CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk3'
      Size: '134217856M' # 128T + 128M

  CFSNode4CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk4'
      Size: '134217856M' # 128T + 128M

  CFSNode5CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk5'
      Size: '134217856M' # 128T + 128M

  CFSNode6CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk6'
      Size: '134217856M' # 128T + 128M

  CFSNode7CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk7'
      Size: '134217856M' # 128T + 128M

  CFSNode8CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk8'
      Size: '134217856M' # 128T + 128M

  CFSNode9CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk9'
      Size: '134217856M' # 128T + 128M

  CFSNode10CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk10'
      Size: '134217856M' # 128T + 128M

  CFSNode11CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk11'
      Size: '134217856M' # 128T + 128M

  CFSNode12CloudBDDisk:
    Type: Custom::CloudBDDisk
    Properties:
      ServiceToken: !GetAtt CloudBDDiskLambda.Arn
      Name: !Sub 'cfs_${ClusterName}_disk12'
      Size: '134217856M' # 128T + 128M

  CFSNodeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - !Ref CloudBDS3RemotePolicy
        - !If
          - SsmSessionEnabled
          - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
          - !Ref 'AWS::NoValue'
        - !If
          - CloudWatchEnabled
          - 'arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy'
          - !Ref 'AWS::NoValue'
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:AttachNetworkInterface'
                Resource: '*'
              - Effect: Allow
                Action: 'ec2:DescribeTags' # Used to identify autoscaling node group number
                Resource: '*'
              - Effect: Allow
                Action: 'ec2:AssignPrivateIpAddresses'
                Resource: '*'
              - !If
                - UseCache
                - Effect: Allow
                  Action:
                    - 'ec2:DescribeVolumes'
                  Resource: '*'
                - !Ref 'AWS::NoValue'

  CFSNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref CFSNodeRole]

  CFSPlacementGroup:
    Condition: UsePlacementGroup
    Type: AWS::EC2::PlacementGroup
    Properties:
      Strategy: !Ref PlacementStrategy

  CFSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [CFSNodeAmis, !Ref 'AWS::Region', HVM64]
      SecurityGroups: [!Ref CFSNodeSecurityGroup]
      InstanceType: !Ref InstanceType
      EbsOptimized: true
      IamInstanceProfile: !Ref CFSNodeInstanceProfile
      InstanceMonitoring: false
      KeyName: !Ref KeyPair
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            CFS_INSTANCE_ID="$(curl -s http://169.254.169.254:/latest/meta-data/instance-id)"
            CFS_NODE_GROUP="$(aws ec2 describe-tags \
                --filters Name=key,Values=CFSNodeGroup \
                          Name=resource-id,Values="$CFS_INSTANCE_ID" \
                --region ${AWS::Region} \
                --endpoint-url "https://${CFSEc2EndpointUrl}" \
                --query Tags[0].Value \
                --output text)"
            cat << EOF > /root/configure.env
            export AWS_REGION="${AWS::Region}"
            export CFS_NODE_GROUP="$CFS_NODE_GROUP"
            export CFS_ENI_IDS='${CFSNodeEnis}'
            export CFS_ENI_INTERFACE="ens6"
            export CFS_ENI_DEVICE_INDEX="1"
            export CFS_NODE_IPS='${CFSNodeIps}'
            export CFS_VIRTUAL_IPS='${CFSVirtualIps}'
            export CLOUDBD_CREDENTIALS_REGION="${AWS::Region}"
            export CLOUDBD_CREDENTIALS_PARAM_NAME="${CloudBDCredentialsParamName}"
            export CLOUDBD_REMOTE_NAME="remote"
            export CLOUDBD_REMOTE_BUCKET="${CloudBDS3RemoteBucket}"
            export CLOUDBD_REMOTE_HTTP_PROTOCOL="${CloudBDHttpProtocol}"
            export CLOUDBD_DISK_NAMES='${CloudBDDiskNames}'
            export CFS_CLUSTER_NAME="${ClusterName}"
            export CFS_VOLUME_NAMES="${VolumeName}"
            export CFS_SNAPSHOT_SUPPORT="yes"
            export CFS_USE_CACHE="no"
            export CFS_EC2_ENDPOINT_URL="${CFSEc2EndpointUrl}"
            export CFS_CLOUDFORMATION_ENDPOINT_URL="${CFSCloudFormationEndpointUrl}"
            export CFS_API_ENDPOINT_URL="${CFSApiEndpointUrl}"
            export CFS_SSM_ENDPOINT_URL="${CFSSsmEndpointUrl}"
            export CFS_SSMMESSAGES_ENDPOINT_URL="${CFSSsmMessagesEndpointUrl}"
            export CFS_MONITORING_ENDPOINT_URL="${CFSMonitoringEndpointUrl}"
            export CFS_LOGGING_ENDPOINT_URL="${CFSLoggingEndpointUrl}"
            export CFS_CLOUDWATCH_SUPPORT="${CloudWatchSupport}"
            EOF

            source /root/configure.env
            /root/configure.sh

            /usr/local/bin/cfn-signal \
                -e "$?" \
                --region ${AWS::Region} \
                --stack ${AWS::StackName} \
                --resource CFSAutoScalingGroup$CFS_NODE_GROUP \
                --url "https://$CFS_CLOUDFORMATION_ENDPOINT_URL"
          - CFSNodeEnis: !Join
              - ','
              - - !Ref CFSNode0Eni
                - !Ref CFSNode1Eni
                - !Ref CFSNode2Eni
                - !If [Use6Nodes, !Ref CFSNode3Eni, !Ref 'AWS::NoValue']
                - !If [Use6Nodes, !Ref CFSNode4Eni, !Ref 'AWS::NoValue']
                - !If [Use6Nodes, !Ref CFSNode5Eni, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !Ref CFSNode6Eni, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !Ref CFSNode7Eni, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !Ref CFSNode8Eni, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !Ref CFSNode9Eni, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !Ref CFSNode10Eni, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !Ref CFSNode11Eni, !Ref 'AWS::NoValue']
            CFSNodeIps: !Join
              - ','
              - - !GetAtt CFSNode0Eni.PrimaryPrivateIpAddress
                - !GetAtt CFSNode1Eni.PrimaryPrivateIpAddress
                - !GetAtt CFSNode2Eni.PrimaryPrivateIpAddress
                - !If [Use6Nodes, !GetAtt CFSNode3Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
                - !If [Use6Nodes, !GetAtt CFSNode4Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
                - !If [Use6Nodes, !GetAtt CFSNode5Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !GetAtt CFSNode6Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !GetAtt CFSNode7Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !GetAtt CFSNode8Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !GetAtt CFSNode9Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !GetAtt CFSNode10Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !GetAtt CFSNode11Eni.PrimaryPrivateIpAddress, !Ref 'AWS::NoValue']
            CFSVirtualIps: !Join
              - ','
              - - !Select [0, !GetAtt CFSNode0Eni.SecondaryPrivateIpAddresses]
                - !Select [0, !GetAtt CFSNode1Eni.SecondaryPrivateIpAddresses]
                - !Select [0, !GetAtt CFSNode2Eni.SecondaryPrivateIpAddresses]
                - !If [Use6Nodes, !Select [0, !GetAtt CFSNode3Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
                - !If [Use6Nodes, !Select [0, !GetAtt CFSNode4Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
                - !If [Use6Nodes, !Select [0, !GetAtt CFSNode5Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !Select [0, !GetAtt CFSNode6Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !Select [0, !GetAtt CFSNode7Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !Select [0, !GetAtt CFSNode8Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !Select [0, !GetAtt CFSNode9Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !Select [0, !GetAtt CFSNode10Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !Select [0, !GetAtt CFSNode11Eni.SecondaryPrivateIpAddresses], !Ref 'AWS::NoValue']
            CloudBDDiskNames: !Join
              - ','
              - - !GetAtt CFSNode0CloudBDDisk.Name
                - !GetAtt CFSNode1CloudBDDisk.Name
                - !GetAtt CFSNode2CloudBDDisk.Name
                - !If [Use6Nodes, !GetAtt CFSNode3CloudBDDisk.Name, !Ref 'AWS::NoValue']
                - !If [Use6Nodes, !GetAtt CFSNode4CloudBDDisk.Name, !Ref 'AWS::NoValue']
                - !If [Use6Nodes, !GetAtt CFSNode5CloudBDDisk.Name, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !GetAtt CFSNode6CloudBDDisk.Name, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !GetAtt CFSNode7CloudBDDisk.Name, !Ref 'AWS::NoValue']
                - !If [Use9Nodes, !GetAtt CFSNode8CloudBDDisk.Name, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !GetAtt CFSNode9CloudBDDisk.Name, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !GetAtt CFSNode10CloudBDDisk.Name, !Ref 'AWS::NoValue']
                - !If [Use12Nodes, !GetAtt CFSNode11CloudBDDisk.Name, !Ref 'AWS::NoValue']
            CFSEc2EndpointUrl: !Select [1, !Split [':', !Select [0, !GetAtt CFSEc2Endpoint.DnsEntries]]]
            CFSCloudFormationEndpointUrl: !Select [1, !Split [':', !Select [0, !GetAtt CFSCloudFormationEndpoint.DnsEntries]]]
            CFSApiEndpointUrl: !Select [1, !Split [':', !Select [0, !GetAtt CFSApiEndpoint.DnsEntries]]]
            CFSSsmEndpointUrl: !Select [1, !Split [':', !Select [0, !GetAtt CFSSsmEndpoint.DnsEntries]]]
            CFSSsmMessagesEndpointUrl: !If
              - SsmSessionEnabled
              - !Select [1, !Split [':', !Select [0, !GetAtt CFSSsmMessagesEndpoint.DnsEntries]]]
              - !Sub 'ssmmessages.${AWS::Region}.amazonaws.com'
            CFSMonitoringEndpointUrl: !If
              - CloudWatchEnabled
              - !Select [1, !Split [':', !Select [0, !GetAtt CFSMonitoringEndpoint.DnsEntries]]]
              - !Sub 'monitoring.${AWS::Region}.amazonaws.com'
            CFSLoggingEndpointUrl: !If
              - CloudWatchEnabled
              - !Select [1, !Split [':', !Select [0, !GetAtt CFSLoggingEndpoint.DnsEntries]]]
              - !Sub 'logs.${AWS::Region}.amazonaws.com'

  CFSAutoScalingGroup0:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: [!Ref AvailabilityZone]
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '3'
      LaunchConfigurationName: !Ref CFSLaunchConfiguration
      PlacementGroup: !If [UsePlacementGroup, !Ref CFSPlacementGroup, !Ref 'AWS::NoValue']
      VPCZoneIdentifier: [!Ref CFSPrivateSubnet]
      Tags:
        - Key: 'Name'
          PropagateAtLaunch: true
          Value: !Sub 'CFS Node Group 0 (${ClusterName})'
        - Key: 'CFSNodeGroup'
          PropagateAtLaunch: true
          Value: '0'
        - Key: 'CFSClusterName'
          PropagateAtLaunch: true
          Value: !Ref ClusterName
        - Key: 'CFSDependsOn'   # Force master node updates after all other groups
          PropagateAtLaunch: false
          Value: !Join
            - ','
            - - !If [Use6Nodes, !Ref CFSAutoScalingGroup1, !Ref 'AWS::NoValue']
              - !If [Use9Nodes, !Ref CFSAutoScalingGroup2, !Ref 'AWS::NoValue']
              - !If [Use12Nodes, !Ref CFSAutoScalingGroup3, !Ref 'AWS::NoValue']
    CreationPolicy:
      ResourceSignal:
        Count: '3'
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 2
        MinSuccessfulInstancesPercent: 66
        WaitOnResourceSignals: true
        PauseTime: PT15M

  CFSAutoScalingGroup1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: Use6Nodes
    Properties:
      AvailabilityZones: [!Ref AvailabilityZone]
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '3'
      LaunchConfigurationName: !Ref CFSLaunchConfiguration
      PlacementGroup: !If [UsePlacementGroup, !Ref CFSPlacementGroup, !Ref 'AWS::NoValue']
      VPCZoneIdentifier: [!Ref CFSPrivateSubnet]
      Tags:
        - Key: 'Name'
          PropagateAtLaunch: true
          Value: !Sub 'CFS Node Group 1 (${ClusterName})'
        - Key: 'CFSNodeGroup'
          PropagateAtLaunch: true
          Value: '1'
        - Key: 'CFSClusterName'
          PropagateAtLaunch: true
          Value: !Ref ClusterName
    CreationPolicy:
      ResourceSignal:
        Count: '3'
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 2
        MinSuccessfulInstancesPercent: 66
        WaitOnResourceSignals: true
        PauseTime: PT15M

  CFSAutoScalingGroup2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: Use9Nodes
    Properties:
      AvailabilityZones: [!Ref AvailabilityZone]
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '3'
      LaunchConfigurationName: !Ref CFSLaunchConfiguration
      PlacementGroup: !If [UsePlacementGroup, !Ref CFSPlacementGroup, !Ref 'AWS::NoValue']
      VPCZoneIdentifier: [!Ref CFSPrivateSubnet]
      Tags:
        - Key: 'Name'
          PropagateAtLaunch: true
          Value: !Sub 'CFS Node Group 2 (${ClusterName})'
        - Key: 'CFSNodeGroup'
          PropagateAtLaunch: true
          Value: '2'
        - Key: 'CFSClusterName'
          PropagateAtLaunch: true
          Value: !Ref ClusterName
    CreationPolicy:
      ResourceSignal:
        Count: '3'
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 2
        MinSuccessfulInstancesPercent: 66
        WaitOnResourceSignals: true
        PauseTime: PT15M

  CFSAutoScalingGroup3:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: Use12Nodes
    Properties:
      AvailabilityZones: [!Ref AvailabilityZone]
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '3'
      LaunchConfigurationName: !Ref CFSLaunchConfiguration
      PlacementGroup: !If [UsePlacementGroup, !Ref CFSPlacementGroup, !Ref 'AWS::NoValue']
      VPCZoneIdentifier: [!Ref CFSPrivateSubnet]
      Tags:
        - Key: 'Name'
          PropagateAtLaunch: true
          Value: !Sub 'CFS Node Group 3 (${ClusterName})'
        - Key: 'CFSNodeGroup'
          PropagateAtLaunch: true
          Value: '3'
        - Key: 'CFSClusterName'
          PropagateAtLaunch: true
          Value: !Ref ClusterName
    CreationPolicy:
      ResourceSignal:
        Count: '3'
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 2
        MinSuccessfulInstancesPercent: 66
        WaitOnResourceSignals: true
        PauseTime: PT15M

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'CloudBD Credentials'
        Parameters:
          - CloudBDCredentialsParamName
          - CloudBDCredentialsCustomKeyId
      - Label:
          default: 'VPC and Network Settings'
        Parameters:
          - Vpc
          - AvailabilityZone
          - SubnetCidr
      - Label:
          default: 'CFS Settings'
        Parameters:
          - ClusterName
          - VolumeName
          - NumNodes
          - InstanceType
          - PlacementStrategy
      - Label:
          default: 'S3 Backend Settings'
        Parameters:
          - CloudBDServerSideEncryption
          - CloudBDHttpProtocol
      - Label:
          default: 'Admin Settings'
        Parameters:
          - KeyPair
          - SsmSessionSupport
          - CloudWatchSupport
    ParameterLabels:
      Vpc:
        default: 'VPC ID'
      AvailabilityZone:
        default: 'Availability Zone'
      SubnetCidr:
        default: 'Subnet CIDR'
      ClusterName:
        default: 'Cluster Name'
      VolumeName:
        default: 'Volume Name'
      NumNodes:
        default: 'No. of Nodes'
      InstanceType:
        default: 'Instance Type'
      PlacementStrategy:
        default: 'Placement Strategy'
      CloudBDCredentialsParamName:
        default: 'SSM Parameter Name'
      CloudBDCredentialsCustomKeyId:
        default: 'Custom KMS Key'
      CloudBDServerSideEncryption:
        default: 'Server-Side Encryption'
      CloudBDHttpProtocol:
        default: 'HTTP Protocol'
      KeyPair:
        default: 'Key Pair'
      SsmSessionSupport:
        default: 'SSM Session Support'
      CloudWatchSupport:
        default: 'CloudWatch Support'

Outputs:
  CFSClientSecurityGroup:
    Description: Security group ID allowed to attach CFS volumes
    Value: !GetAtt CFSClientSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}::CFSClientSecurityGroup'

  CFSAdminSecurityGroup:
    Description: Security group ID allowed to SSH to CFS nodes
    Value: !GetAtt CFSAdminSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}::CFSAdminSecurityGroup'

  CFSClusterName:
    Description: Name of the CFS cluster
    Value: !Ref ClusterName
    Export:
      Name: !Sub '${AWS::StackName}::CFSClusterName'

  CFSVolumeName:
    Description: Name of the CFS volume
    Value: !Ref VolumeName
    Export:
      Name: !Sub '${AWS::StackName}::CFSVolumeName'

  CFSClusterDnsName:
    Description: DNS name of the CFS cluster
    Value: !Sub '${ClusterName}.cfs.cloudbd.io'
    Export:
      Name: !Sub '${AWS::StackName}::CFSClusterDnsName'
